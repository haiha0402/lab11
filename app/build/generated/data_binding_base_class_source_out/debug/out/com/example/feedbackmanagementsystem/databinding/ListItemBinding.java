// Generated by view binder compiler. Do not edit!
package com.example.feedbackmanagementsystem.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.feedbackmanagementsystem.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ListItemBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView itemEmailValue;

  @NonNull
  public final TextView itemGenderValue;

  @NonNull
  public final TextView itemNameValue;

  @NonNull
  public final TextView itemPhoneValue;

  private ListItemBinding(@NonNull LinearLayout rootView, @NonNull TextView itemEmailValue,
      @NonNull TextView itemGenderValue, @NonNull TextView itemNameValue,
      @NonNull TextView itemPhoneValue) {
    this.rootView = rootView;
    this.itemEmailValue = itemEmailValue;
    this.itemGenderValue = itemGenderValue;
    this.itemNameValue = itemNameValue;
    this.itemPhoneValue = itemPhoneValue;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ListItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ListItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.list_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ListItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.item_email_value;
      TextView itemEmailValue = ViewBindings.findChildViewById(rootView, id);
      if (itemEmailValue == null) {
        break missingId;
      }

      id = R.id.item_gender_value;
      TextView itemGenderValue = ViewBindings.findChildViewById(rootView, id);
      if (itemGenderValue == null) {
        break missingId;
      }

      id = R.id.item_name_value;
      TextView itemNameValue = ViewBindings.findChildViewById(rootView, id);
      if (itemNameValue == null) {
        break missingId;
      }

      id = R.id.item_phone_value;
      TextView itemPhoneValue = ViewBindings.findChildViewById(rootView, id);
      if (itemPhoneValue == null) {
        break missingId;
      }

      return new ListItemBinding((LinearLayout) rootView, itemEmailValue, itemGenderValue,
          itemNameValue, itemPhoneValue);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
